import pandas as pd 
import streamlit as st
from PIL import Image 
import plotly.express as px
import plotly.graph_objects as go


st.set_page_config(
        page_title= 'An√°lise das M√©dias',
        page_icon='üìä',
       layout="wide")


image = Image.open('sys.png')
st.sidebar.image(image, use_column_width='auto')

st.sidebar.markdown('''---''')
st.sidebar.markdown('### Powered by Diniz JP')


#---------------------------------------------##---------------------------------------------#

def adicionar_anotacoes(fig, df, x_column, y_column, text_list):
    for i, text in enumerate(text_list):
        x = df.sort_values(y_column, ascending=False).iloc[i][x_column]
        y = df.sort_values(y_column, ascending=False).iloc[i][y_column]
        fig.add_annotation(x=x, y=y, text=text, showarrow=True, font=dict(size=8, color='black'), arrowsize=0.3)


#---------------------------------------------##---------------------------------------------#


df = pd.read_csv('/Users/dinizjp/ProgramacÃßaÃÉo /Projetos /Projeto SYS/dados_publicacoes/Dashboard/dados_tratados.csv', sep=',')


tab1, tab2, tab3 = st.tabs( ['Correla√ß√£o, M√©dia e Desvio Padr√£o', 'An√°lise de posts', 'Dispers√£o por m√©trica'])

#---------------------------------------------##---------------------------------------------#


with tab1:   
    
    with st.container():

        st.markdown('#### Correla√ß√£o entre as m√©tricas')
        st.markdown('###### Quanto mais pr√≥ximo o valor estiver de 1, maior √© a correla√ß√£o entre as duas v√°riaveis')

        st.markdown(''' A correla√ß√£o entre **Alcance e Curtidas √© de 0.87**. Isso significa que, em geral, quanto maior o alcance de uma postagem, maior √© o n√∫mero de curtidas recebidas.

A correla√ß√£o entre **Curtidas e Compartilhamento √© de 0.83**. Isso significa que postagens que recebem um alto n√∫mero de curtidas tendem a ser mais compartilhadas pelos usu√°rio.

A correla√ß√£o entre **Alcance e Impress√µes √© praticamente perfeita, com um valor de 0.98**. Isso indica que essas m√©tricas est√£o altamente relacionadas, ou seja, quanto maior o alcance de uma postagem, maior √© o n√∫mero de vezes que ela √© exibida
        ''')


        df1 = df[['impress√µes','alcance','compartilhamentos','seguimentos','curtidas','coment√°rios','salvamentos']].corr().round(2)

        # Exibir o DataFrame estilizado no Streamlit
        st.dataframe(df1, width=1200)

        st.divider()


#---------------------------------------------##---------------------------------------------#
        st.markdown('#### M√©dia e Desvio Padr√£o das principais m√©tricas')

        st.markdown('O fato de todas as m√©tricas apresentarem um desvio padr√£o alto indica que h√° uma varia√ß√£o alta no engajamento dos seguidores. Isso implica que algumas postagens t√™m um bom desempenho, enquanto outras t√™m um desempenho abaixo da m√©dia.')

        col1, col2, col3, col4, col5, col6 = st.columns(6)


        col1.metric("M√©dia Alcance", "19.082")
        col1.metric("Desvio Padr√£o", '¬± 12.589' )


        col2.metric("M√©dia Impress√µes", "23.252")
        col2.metric("Desvio Padr√£o", '¬± 15.771' )


        col3.metric("M√©dia Curtidas", "1.268")
        col3.metric("Desvio Padr√£o", '¬± 1.253' )


        col4.metric("M√©dia Compartilhamento", "367")
        col4.metric("Desvio Padr√£o", '¬± 640' )


        col5.metric("M√©dia Com√©ntarios", "19")
        col5.metric("Desvio Padr√£o",'¬± 55.43' )


        col6.metric("M√©dia Salvamentos", "186")
        col6.metric("Desvio Padr√£o", '¬± 303' )


#---------------------------------------------##---------------------------------------------#

        st.divider()



        df_aux = df[['tipo_de_publica√ß√£o', 'alcance']].groupby('tipo_de_publica√ß√£o').agg({'alcance':['mean','std']}).round()

        df_aux.columns = ['alcance m√©dio', 'Desvio padr√£o']

        df_aux = df_aux.reset_index()


        fig = go.Figure()

        fig.add_trace(go.Bar(
            name='Control',
            x=df_aux['tipo_de_publica√ß√£o'],
            y=df_aux['alcance m√©dio'],
            error_y=dict(type='data', array=df_aux['Desvio padr√£o']),
            marker=dict(color=['#ED618C', '#B5385E','#A8123E'])  
        ))

        fig.update_layout(
            barmode='group',
            width=1000,
            height=600,
            yaxis_title='Alcance m√©dio',
            xaxis_title='Tipo de publica√ß√£o'
        )

        st.markdown('### M√©dia de Alcance por tipo de post')
        st.markdown('O **Desvio padr√£o** (Barra preta no centro do gr√°fico) est√° muito alto, isso indica que os dados t√™m uma grande variabilidade. Em termos pr√°ticos, um alto desvio padr√£o sugere que os valores individuais est√£o mais espalhados e menos previs√≠veis, o que dificulta indentificar padr√µes replic√°veis ')

        st.plotly_chart(fig)


#---------------------------------------------##---------------------------------------------#

with tab2: 
    
    with st.container():
        
        
        
#---------------------------------------------##---------------------------------------------#
       #plot 1 - 20 melhores em alcance  
    
    
        st.markdown('## Os 20 melhores post por Alcance')
        st.markdown('Em rela√ß√£o ao Alcance, n√£o foi identificado nenhum padr√£o constante com o formato ou tema dos posts. Isso indica que o alcance das postagens de melhor desempenho n√£o est√° fortemente ligado a caracter√≠sticas espec√≠ficas, mas pode ser uma combina√ß√£o de Tema/Timing')
        
        cores = ['#ED618C', '#A8123E', '#FFCFC2']


        fig = px.scatter(df.sort_values('alcance', ascending=False).head(20),
                         x='data',
                         y='alcance',
                         width=1100,
                         height=700,
                         color='tipo_de_publica√ß√£o',
                         color_discrete_sequence=cores)




        fig.update_traces(mode='markers', marker=dict(size=12))


        textos = ['Post Guia Astro Tesao', 'Pol√™mica Daniel Alves', 'Tipos de Sexo', 'Carrossel Twitter', 'Post Frase Safada',
                  'Amiga sofrendo por macho', 'Colab VenusEmLeao', 'Monte seu nome de Gostosa', '3 posi√ß√µes para dar em p√©',
                  'Carrossel Twitter', 'Ajuda para chegar no boy', '4 tecnicas para chupada fatal', 'Comentarios Grupo Facebook',
                  'Publi Feel Lub', 'Cansada de papai e mam√£e?', 'Tes√£o Bloquinho', 'Colab Hellomeyfe', 'Insegura no Uber Audio',
                  'Pol√™mica Ju√≠za', 'Vale Calcinha, vem retirar']


        adicionar_anotacoes(fig, df, 'data', 'alcance', textos)


        st.plotly_chart(fig)
        
        
#---------------------------------------------##---------------------------------------------#
    #plot 2 - 20 melhores por curtida   
        
        cores = ['#ED618C', '#A8123E', '#FFCFC2']

        fig = px.scatter(df.sort_values('curtidas', ascending=False).head(20),
                         x='data',
                         y='curtidas',
                         width=1100,
                         height=700,
                         color='tipo_de_publica√ß√£o',
                         color_discrete_sequence=cores)

        fig.update_traces(mode='markers', marker=dict(size=12))

        textos = ['Carrossel Twitter','Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter', 'Cansada de papai e mam√£e?','Pol√™mica Ju√≠za', 
                  'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter','Carrossel Twitter', '3 posi√ß√µes para dar em p√©',
                  'Post Frase Safada', 'Carrossel Twitter', 'Camisa 24 sele√ß√£o', 'Meme Luiza Sonza', '4 tecnicas para chupada fatal','Carrossel Twitter',
                  'Colab VenusEmLeao', 'Carrossel Twitter']

        adicionar_anotacoes(fig, df, 'data', 'curtidas', textos)
        
        st.markdown('## Os 20 melhores post por Curtida')
        st.markdown('Em rela√ß√£o √†s curtidas e compartilhamentos, foi observado que 12 dos 20 melhores posts t√™m o formato de carrossel Twitter. Isso sugere que esse formato tem uma tend√™ncia a gerar um maior envolvimento dos usu√°rios, levando a mais curtidas e compartilhamentos.')
        
        st.plotly_chart(fig)
        
#---------------------------------------------##---------------------------------------------#
        
        
        cores = ['#ED618C', '#A8123E', '#FFCFC2']


        fig = px.scatter(df.sort_values('compartilhamentos', ascending=False).head(20),
                         x='data',
                         y='compartilhamentos',
                         width=1100,
                         height=700,
                         color='tipo_de_publica√ß√£o',
                         color_discrete_sequence=cores)

        fig.update_traces(mode='markers', marker=dict(size=12))


        textos = ['Carrossel Twitter','Carrossel Twitter', 'Pol√™mica Ju√≠za', 'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Dia do Beijo', 
                  'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter', 'Carrossel Twitter','Carrossel Twitter', 
                  'Monte seu nome de Gostosa', 'Dia do Sexo', 'Carrossel Twitter', 'Carrossel Twitter', 'Camisa 24 sele√ß√£o','Post Frase Safada',
                  '3 posi√ß√µes para dar em p√©','Comentarios Grupo Facebook2']


        adicionar_anotacoes(fig, df, 'data', 'compartilhamentos', textos)
        
        st.markdown('## Os 20 melhores post por Compartilhamento')
        st.markdown('Al√©m de 12 posts em formato de carrossel, outros 3 posts que apareceram nos melhores em curtidas e compartilhamento, s√£o eles: Post Frase Safada, Pol√™mica Ju√≠za e 3 Posi√ß√µes para dar em p√©')
        
        st.plotly_chart(fig)
        
#---------------------------------------------##---------------------------------------------#
        
        st.divider()
        
        st.markdown('### Voc√™s podem encontrar o link dos post em ordem descrecente do maior para o menor aqui nessas tabelas')
        
        
        
        st.markdown('##### Os 20 melhores post por Alcance')
        
        st.dataframe(df[['link_permanente', 'alcance','data']].sort_values('alcance', ascending=False).head(20), width=1000, height=738)
        
        
        st.markdown('##### Os 20 melhores post por Curtidas')
        
        st.dataframe(df[['link_permanente', 'curtidas','data']].sort_values('curtidas', ascending=False).head(20), width=1000, height=738)
        
        
        st.markdown('##### Os 20 melhores post por Compartilhamentos')
        
        st.dataframe(df[['link_permanente', 'compartilhamentos','data']].sort_values('compartilhamentos', ascending=False).head(20), width=1000, height=738)
        
#---------------------------------------------##---------------------------------------------#
        

with tab3:   
    
    with st.container():
        
        st.markdown('## Gr√°ficos de dispers√£o das 3 principais m√©tricas: Alcance, Curtidas, Compartilhamentos.')
        st.markdown('#### Uma vis√£o geral de como os posts est√£o dispersos por m√©trica ao longo de 1 ano.')        
        st.divider()
        
        color_map = {
            'Carrossel do Instagram': '#ED618C',
            'Imagem do Instagram': '#FFCFC2',
            'V√≠deo do Instagram': '#A8123E'}

        fig = go.Figure()

        for category, color in color_map.items():
            filtered_data = df[df['tipo_de_publica√ß√£o'] == category]
            fig.add_trace(go.Scatter(
                x=filtered_data['data'],
                y=filtered_data['alcance'],
                mode='markers',
                marker=dict(color=color),
                name=category))

        fig.update_layout(
            width=1100,
            height=600,
            xaxis_title='Data',
            yaxis_title='Quantidade de pessoas alcan√ßadas')

        st.markdown('###  Dispers√£o por alcance e por tipo de post')
        st.markdown('A uma quantidade de **373 posts que performaram entre 0 e 25.000 de alcance**, enquanto **136 performaram entre 25.001 e 50.000** e somente **12 posts performaram acima de 50.001**.   ')
        
        st.plotly_chart(fig)
        
#---------------------------------------------##---------------------------------------------#
            
        
        color_map = {
            'Carrossel do Instagram': '#ED618C',
            'Imagem do Instagram': '#FFCFC2',
            'V√≠deo do Instagram': '#A8123E'}

        fig = go.Figure()

        for category, color in color_map.items():
            filtered_data = df[df['tipo_de_publica√ß√£o'] == category]
            fig.add_trace(go.Scatter(
                x=filtered_data['data'],
                y=filtered_data['curtidas'],
                mode='markers',
                marker=dict(color=color),
                name=category))

        fig.update_layout(
            width=1100,
            height=600,
            xaxis_title='Data',
            yaxis_title='N√∫mero de Curtidas')

        st.markdown('### Dispers√£o por curtida e por tipo de post')
        st.markdown('A uma quantidade de **412 posts que performaram entre 0 e 2000 curtidas**, enquanto **82 performaram entre 2001 e 4000** e somente **27 posts performaram acima de 4000**.   ')
        
        st.plotly_chart(fig)
        
        
        
#---------------------------------------------##---------------------------------------------#
            
        
        color_map = {
            'Carrossel do Instagram': '#ED618C',
            'Imagem do Instagram': '#FFCFC2',
            'V√≠deo do Instagram': '#A8123E'}

        fig = go.Figure()

        for category, color in color_map.items():
            filtered_data = df[df['tipo_de_publica√ß√£o'] == category]
            fig.add_trace(go.Scatter(
                x=filtered_data['data'],
                y=filtered_data['compartilhamentos'],
                mode='markers',
                marker=dict(color=color),
                name=category))

        fig.update_layout(
            width=1100,
            height=600,
            xaxis_title='Data',
            yaxis_title='N√∫mero de Compartilhamentos')

        st.markdown('### Dispers√£o por compartilhamento e por tipo de post')
        st.markdown('A uma quantidade de **472 post que performaram entre 0 e 1000 compartilhamentos**, enquanto **42 posts performaram entre 1000 e 3000** e **somente 7 performaram acima de 3000**. ')
        
        
        st.plotly_chart(fig)
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        